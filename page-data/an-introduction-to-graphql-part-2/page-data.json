{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/an-introduction-to-graphql-part-2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Brainstormer"}},"markdownRemark":{"id":"bc6b620d-3445-51a9-82a0-255c303a583f","excerpt":"Besides querying data, we also want to be able to modify it. To do this, GraphQL supports a kind of operation named mutation. What are mutations? A mutation is…","html":"<p>Besides querying data, we also want to be able to modify it. To do this, GraphQL supports a kind of operation named <strong>mutation.</strong></p>\n<h1 id=\"what-are-mutations\" style=\"position:relative;\"><a href=\"#what-are-mutations\" aria-label=\"what are mutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are mutations?</h1>\n<p>A mutation is an operation to modify data. Typically a mutation will do either 1 of these things (And it’s probably best to have each mutation doing only one):</p>\n<ul>\n<li>Update data</li>\n<li>Create data</li>\n<li>Delete data</li>\n</ul>\n<p>In the server-side, we can define mutations in a similar way like queries are.</p>\n<p>Using the previous example of a simplified Twitter-like API, we can define the following mutations:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutation</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token attr-name\">createTweet</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">content</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Tweet</span><span class=\"token operator\">!</span>\n\t<span class=\"token attr-name\">deleteTweet</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">tweetId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n\t<span class=\"token attr-name\">RegisterUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userData</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">RegisterUserPayload</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">User</span><span class=\"token operator\">!</span>\n\t<span class=\"token attr-name\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">userData</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UpdateUserPayload</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">User</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These mutations are related to the current user (except the register user), which we can assume that it is identified by a <a href=\"https://jwt.io/\">JWT</a>.</p>\n<p>A mutation will also return a data type as a response. This is used to update the client cache since a GraphQL client will usually keep a local state of the data. This will be discussed in depth soon!</p>\n<p>This way, in order to send a mutation, for instance to create a tweet, we can send the data like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property-query property-mutation\">createTweet</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"I'm still learning GraphQL and it's cool\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">id</span>\n\t\t<span class=\"token property\">content</span>\n\t\t<span class=\"token property\">createdAt</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you notice, in here we define the fields that we wish to get from the response, which should be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"createTweet\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"44\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I'm still learning GraphQL and it's cool\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"createdAt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-06\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we also get the desired fields.</p>\n<p>This is great, but while our API changes during time, we sometimes may need to have a way to organise the used fields in different queries and mutations so we don’t have to keep track on every change.</p>\n<p>For this we can use Fragments!</p>\n<h1 id=\"fragments\" style=\"position:relative;\"><a href=\"#fragments\" aria-label=\"fragments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragments</h1>\n<p>A fragment is a reusable unit that lets you construct sets of fields where you can include them in queries or mutations. This allows us to just call the configured fragment wherever we want.</p>\n<p>Fragments are usually defined on the client-side. So when we perform a query we need to always send the fragment definition of all the fragments used.</p>\n<p>We can define a fragment like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">TweetParts</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Tweet</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">content</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By having this, we can change the createTweet mutation like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">TweetParts</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Tweet</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">content</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property-query property-mutation\">createTweet</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"I'm still learning GraphQL and it's cool\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">id</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token fragment function\">TweetParts</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice how we send the fragment together.</p>\n<p>And for the current user information including the tweets:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">TweetParts</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Tweet</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">content</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token object\">me</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">name</span>\n\t\t<span class=\"token property\">email</span>\n\t\t<span class=\"token object\">tweets</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">id</span>\n\t\t\t<span class=\"token operator\">...</span><span class=\"token fragment function\">TweetParts</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This way, if we add more fields to the Tweet data type, like the number of likes, numer of shares, retweet information, we only need to change inside the TweetParts fragment.</p>","fields":{"slug":"/an-introduction-to-graphql-part-2/","readingTime":{"text":"3 min read"}},"frontmatter":{"title":"Introduction to GraphQL - Part 2","date":"July 08, 2022","description":"The second part of the introduction. Here I will talk about how to modify data in the server and how to organise the data fields we want to query."}},"previous":{"fields":{"slug":"/an-introduction-to-graphql-part-1/"},"frontmatter":{"title":"Introduction to GraphQL - Part 1"}},"next":null},"pageContext":{"id":"bc6b620d-3445-51a9-82a0-255c303a583f","previousPostId":"08714305-11be-5d9f-a15b-53db3a55bdd2","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}